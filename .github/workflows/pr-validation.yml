name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

# Required permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  statuses: write

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Skip if PR is in draft
  check-draft:
    name: Check if PR is ready
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.pr-info.outputs.draft }}
    steps:
      - name: Get PR info
        id: pr-info
        run: |
          echo "draft=${{ github.event.pull_request.draft }}" >> $GITHUB_OUTPUT

  # Validation job - runs for all PRs
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for package.json changes
        id: package-check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "package.json\|package-lock.json"; then
            echo "package-changed=true" >> $GITHUB_OUTPUT
          else
            echo "package-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify lockfile integrity
        if: steps.package-check.outputs.package-changed == 'true'
        run: npm ci --audit

      - name: Run linting with annotations
        run: |
          npm run lint 2>&1 | tee lint-results.txt
          if [ $? -ne 0 ]; then
            echo "::error::Linting failed. Please fix the issues above."
            exit 1
          fi

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Check for test file changes
        id: test-check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "test/\|spec/"; then
            echo "tests-changed=true" >> $GITHUB_OUTPUT
          else
            echo "tests-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run browser tests
        run: npm run test:browser:run

      - name: Check build integrity
        run: npm run build

      - name: Comment on PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const fs = require('fs');
              
              let coverage = '';
              try {
                if (fs.existsSync('./coverage/coverage-summary.json')) {
                  const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                  const total = coverageData.total;
                  coverage = `
            ## ðŸ“Š Test Coverage
            - **Lines**: ${total.lines.pct}%
            - **Functions**: ${total.functions.pct}%
            - **Branches**: ${total.branches.pct}%
            - **Statements**: ${total.statements.pct}%
            `;
                }
              } catch (e) {
                console.log('Coverage data not available:', e.message);
                coverage = '\n## ðŸ“Š Test Coverage\nCoverage data not available.\n';
              }

              const comment = `
            ## âœ… PR Validation Results

            This PR has been automatically validated:

            - âœ… Linting passed
            - âœ… Type checking passed  
            - âœ… Unit tests passed
            - âœ… Browser tests passed
            - âœ… Build successful
            ${coverage}

            *This comment is automatically generated by the PR validation workflow.*
            `;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('Successfully posted PR comment');
            } catch (error) {
              console.log('Failed to post PR comment:', error.message);
              // Don't fail the workflow if commenting fails
            }  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
